import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { jwtVerify } from 'jose';

// üîë –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT
const JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret_key';

// üìö –ú–∞—Ä—à—Ä—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const PUBLIC_ROUTES = [
  '/login',
  '/register',
  '/forgot-password',
  '/',
];

// üìö API –º–∞—Ä—à—Ä—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const PUBLIC_API_ROUTES = [
  '/api/auth/login',
  '/api/auth/register',
  '/api/auth/forgot-password',
];

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;

  console.log(`[Middleware] –ü—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞: ${pathname}`);

  // ‚úÖ 1. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
  if (
    pathname.startsWith('/_next/static') ||
    pathname.startsWith('/_next/image') ||
    pathname === '/favicon.ico' ||
    pathname.includes('/images')
  ) {
    return NextResponse.next();
  }

  // ‚úÖ 2. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  if (PUBLIC_ROUTES.includes(pathname)) {
    console.log(`[Middleware] –ü—É–±–ª–∏—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: ${pathname} ‚Äî –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.`);
    return NextResponse.next();
  }

  // ‚úÖ 3. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ API –º–∞—Ä—à—Ä—É—Ç—ã
  if (PUBLIC_API_ROUTES.some(route => pathname.startsWith(route))) {
    console.log(`[Middleware] –ü—É–±–ª–∏—á–Ω—ã–π API-–º–∞—Ä—à—Ä—É—Ç: ${pathname} ‚Äî –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.`);
    return NextResponse.next();
  }
  // ‚úÖ 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
  const token = request.cookies.get('accessToken')?.value;

  if (!token) {
    console.warn(`[Middleware] –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /login.`);
    return NextResponse.redirect(new URL('/login', request.url));
  }

  try {
    await jwtVerify(token, new TextEncoder().encode(JWT_SECRET));
    console.log(`[Middleware] –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω.`);
    return NextResponse.next();
  } catch (error) {
    console.error(`[Middleware] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:`, error);
    return NextResponse.redirect(new URL('/login', request.url));
  }
}

// üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º Middleware –∫ –º–∞—Ä—à—Ä—É—Ç–∞–º
export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico).*)',
  ],
};
